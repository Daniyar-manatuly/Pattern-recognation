import cv2
import torch
import torchvision
from torchvision.transforms import functional as F

# Загрузим предобученную модель Faster R-CNN
model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)
model.eval()  # Перевод в режим инференса

# Список классов COCO (Faster R-CNN обучен на них)
PERSON_CLASS_ID = 1  # "Человек"

# Загружаем изображение
image_path = "C:/Users/opste/Downloads/IMG_20240607_164552_287.jpg"
image = cv2.imread(image_path)

# Преобразуем изображение в RGB (PyTorch требует RGB)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
image_tensor = F.to_tensor(image_rgb).unsqueeze(0)  # В тензор

# Запускаем модель Faster R-CNN
with torch.no_grad():
    predictions = model(image_tensor)

# Копируем оригинальное изображение (чтобы рисовать на нем)
output_image = image.copy()

# Фильтруем только лица (убираем руки и фон)
for i, score in enumerate(predictions[0]["scores"]):
    if score > 0.9:  # Порог уверенности выше, чтобы избежать рук
        label = predictions[0]["labels"][i].item()
        if label == PERSON_CLASS_ID:  # Оставляем только людей
            x1, y1, x2, y2 = map(int, predictions[0]["boxes"][i].tolist())
            width, height = x2 - x1, y2 - y1

            # Фильтр по размеру объекта (чтобы исключить руки)
            if width > 50 and height > 50:
                cv2.rectangle(output_image, (x1, y1), (x2, y2), (0, 255, 0), 2)

# 🔹 **Уменьшаем изображение перед показом**
scale_percent = 50  # Уменьшаем на 50%
new_width = int(output_image.shape[1] * scale_percent / 100)
new_height = int(output_image.shape[0] * scale_percent / 100)
resized_image = cv2.resize(output_image, (new_width, new_height))

# Показываем уменьшенное изображение
cv2.imshow("Faster R-CNN Face Detection", resized_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
